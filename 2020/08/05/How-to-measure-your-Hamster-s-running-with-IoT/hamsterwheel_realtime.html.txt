
<!doctype html>
<html>

<head>
	<title>Hamster wheel realtime reading</title>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.slim.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js"></script>
	<script src="https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/min/moment.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
	<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@1.8.0"></script>
	<style>
		canvas {
			-moz-user-select: none;
			-webkit-user-select: none;
			-ms-user-select: none;
		}
		.chart {
			margin: auto;
			width: 75%;
		}
		.label {
			display: inline-block;
			text-align: right;
			width: 100px;
		}
		.value {
			display: inline-block;
			text-align: left;
			width: 65px;
		}
		.control {
			width: 250px;
		}
	</style>
</head>

<body>
	<div class="chart">
		<canvas id="myChart"></canvas>
	</div>

	<div class="container mt-3">
		<div class="text-center">
			<span class="label">duration:</span>
			<span id="durationValue" class="value">20000</span>
			<span><input type="range" min="1000" max="60000" step="100" value="20000" id="duration" class="control"></span>
		</div>
		<div class="text-center">
			<span class="label">ttl:</span>
			<span id="ttlValue" class="value">60000</span>
			<span><input type="range" min="1000" max="60000" step="100" value="60000" id="ttl" class="control"></span>
		</div>
		<div class="text-center">
			<span class="label">refresh:</span>
			<span id="refreshValue" class="value">1000</span>
			<span><input type="range" min="50" max="3000" step="50" value="1000" id="refresh" class="control"></span>
		</div>
		<div class="text-center">
			<span class="label">delay:</span>
			<span id="delayValue" class="value">2000</span>
			<span><input type="range" min="0" max="5000" step="100" value="2000" id="delay" class="control"></span>
		</div>
		<div class="text-center">
			<span class="label">frameRate:</span>
			<span id="frameRateValue" class="value">30</span>
			<span><input type="range" min="1" max="60" step="1" value="30" id="frameRate" class="control"></span>
		</div>
		<div class="text-center">
			<span class="label">pause:</span>
			<span id="pauseValue" class="value">false</span>
			<span><input type="checkbox" id="pause" class="control"></span>
		</div>
	</div>
	

	<script>
		var isIE = navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.indexOf('Trident') !== -1;

		var chartColors = {
			red: 'rgb(255, 99, 132)',
			orange: 'rgb(255, 159, 64)',
			yellow: 'rgb(255, 205, 86)',
			green: 'rgb(75, 192, 192)',
			blue: 'rgb(54, 162, 235)',
			purple: 'rgb(153, 102, 255)',
			grey: 'rgb(201, 203, 207)'
		};

		// document.getElementById('randomizeData').addEventListener('click', function() {
		// 	config.data.datasets.forEach(function(dataset) {
		// 		dataset.data.forEach(function(dataObj) {
		// 			dataObj.y = randomScalingFactor();
		// 		});
		// 	});

		// 	window.myChart.update();
		// });

		// var colorNames = Object.keys(chartColors);
		// document.getElementById('addDataset').addEventListener('click', function() {
		// 	var colorName = colorNames[config.data.datasets.length % colorNames.length];
		// 	var newColor = chartColors[colorName];
		// 	var newDataset = {
		// 		label: 'Dataset ' + (config.data.datasets.length + 1),
		// 		backgroundColor: color(newColor).alpha(0.5).rgbString(),
		// 		borderColor: newColor,
		// 		fill: false,
		// 		lineTension: 0,
		// 		data: []
		// 	};

		// 	config.data.datasets.push(newDataset);
		// 	window.myChart.update();
		// });

		// document.getElementById('removeDataset').addEventListener('click', function() {
		// 	config.data.datasets.pop();
		// 	window.myChart.update();
		// });

		// document.getElementById('addData').addEventListener('click', function() {
		// 	onRefresh(window.myChart);
		// 	window.myChart.update();
		// });

		//customize code
		// function onReceive(event) {
		// 	// append the new data to the existing chart data
		// 	myChart.data.datasets[0].data.push({
		// 		x: event.timestamp,
		// 		y: event.value
		// 	});

		// 	// update chart datasets keeping the current animation
		// 	myChart.update({
		// 		preservation: true
		// 	});
		// }
		function toTimestamp(strDate){
			return Date.parse(strDate);

		}

		var ws = new WebSocket('ws://10.0.75.1:443'); //conbee gateway websocket endpoint, see https://dresden-elektronik.github.io/deconz-rest-doc/websocket/

		ws.onmessage = function(msg) {     // callback on message receipt
			var response = JSON.parse(msg.data);

			
			if (response.id === '3') {    // Only hamster wheel event where id = 3 in this case

				lastupdated = toTimestamp(response.state.lastupdated);
				isOpen = (response.state.open ? 0:1)

				console.log(Date.now() + ":" + lastupdated + ':' + isOpen);

				// append the new data to the existing chart data
				myChart.data.datasets[0].data.push({
					x:Date.now(), //lastupdated,
					y:isOpen
				});
				
				// update chart datasets keeping the current animation
				myChart.update({
					preservation: true
				});
				

			}
		}

		//end of customized code

		// function randomScalingFactor() {
		// 	return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100);
		// }

		// function onRefresh(chart) {
			// chart.config.data.datasets.forEach(function(dataset) {
			// 	dataset.data.push({
			// 		x: Date.now(),
			// 		y: randomScalingFactor()
			// 	});
			// });
		// }

		var color = Chart.helpers.color;
		var config = {
			type: 'line',
			data: {
				datasets: [{
					label: 'Wheel cycle',
					backgroundColor: color(chartColors.red).alpha(0.5).rgbString(),
					borderColor: chartColors.red,
					fill: false,
					lineTension: 0,
					borderDash: [8, 4],
					data: []
				}]
			},
			options: {
				title: {
					display: true,
					text: 'Hamster wheel realtime reading'
				},
				scales: {
					xAxes: [{
						type: 'realtime',
						realtime: {
							duration: 20000,
							ttl: 60000,
							refresh: 1000,
							delay: 2000,
							pause: false
						}
					}],
					yAxes: [{
						type: 'linear',
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'value'
						}
					}]
				},
				tooltips: {
					mode: 'nearest',
					intersect: false
				},
				hover: {
					mode: 'nearest',
					intersect: false
				},
				plugins: {
					streaming: {
						frameRate: 30
					}
				}
			}
		};

		window.onload = function() {
			var ctx = document.getElementById('myChart').getContext('2d');
			window.myChart = new Chart(ctx, config);
		};


		document.getElementById('duration').addEventListener(isIE ? 'change' : 'input', function() {
			config.options.scales.xAxes[0].realtime.duration = +this.value;
			window.myChart.update({duration: 0});
			document.getElementById('durationValue').innerHTML = this.value;
		});

		document.getElementById('ttl').addEventListener(isIE ? 'change' : 'input', function() {
			config.options.scales.xAxes[0].realtime.ttl = +this.value;
			window.myChart.update({duration: 0});
			document.getElementById('ttlValue').innerHTML = this.value;
		});

		document.getElementById('refresh').addEventListener(isIE ? 'change' : 'input', function() {
			config.options.scales.xAxes[0].realtime.refresh = +this.value;
			window.myChart.update({duration: 0});
			document.getElementById('refreshValue').innerHTML = this.value;
		});

		document.getElementById('delay').addEventListener(isIE ? 'change' : 'input', function() {
			config.options.scales.xAxes[0].realtime.delay = +this.value;
			window.myChart.update({duration: 0});
			document.getElementById('delayValue').innerHTML = this.value;
		});

		document.getElementById('frameRate').addEventListener(isIE ? 'change' : 'input', function() {
			config.options.plugins.streaming.frameRate = +this.value;
			window.myChart.update({duration: 0});
			document.getElementById('frameRateValue').innerHTML = this.value;
		});

		document.getElementById('pause').addEventListener('change', function() {
			config.options.scales.xAxes[0].realtime.pause = this.checked;
			window.myChart.update({duration: 0});
			document.getElementById('pauseValue').innerHTML = this.checked;
		});
	</script>
</body>

</html>
